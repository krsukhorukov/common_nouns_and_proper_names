stages:
  - deploy

image: docker:20.10.14-dind
variables:
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

services:
  - docker:20.10.14-dind

before_script:
  - until docker info; do sleep 1; done

.deploy-template:
  script: &build-image-script
    - |
      if [[ $CI_COMMIT_TAG != null ]]; then
        tag=":$CI_COMMIT_TAG"
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = &{$CI_COMMIT_TAG}"
      else
        tag=":$CI_COMMIT_REF_SLUG.${CI_BUILD_ID}"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - 'echo $(date +%Y-%m-%d_%H%M%S)" commit="${CI_COMMIT_SHA}" build id="${CI_BUILD_ID} > ./build_info'
    - 'echo "TAG=${tag} AUTHOR=${CI_COMMIT_AUTHOR} BRANCH=${CI_COMMIT_BRANCH}" >> ./build_info'
    - 'docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY'
    - 'echo "${CI_REGISTRY_IMAGE}${tag}${POSTFIX}"'
    - 'cat ${SSH_KEY} > ./id_rsa'
    - 'DOCKER_BUILDKIT=1 docker build --build-arg AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" --build-arg AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" -t "${CI_REGISTRY_IMAGE}${tag}${POSTFIX}" -f ${DOCKERFILE} .'
    - 'docker push "${CI_REGISTRY_IMAGE}${tag}${POSTFIX}"'
    - 'docker logout $CI_REGISTRY'

deploy.to-prod:
  stage: deploy
  allow_failure: false
  tags:
    - in-kub
  variables:
    POSTFIX: ''
    DOCKERFILE: './Dockerfile'
  script:
    - *build-image-script
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+.\d+.\d+$/
      exists:
        - Dockerfile
